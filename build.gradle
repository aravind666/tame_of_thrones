plugins {
    id 'java'
    id 'idea'
    id 'pmd'
    id 'checkstyle'
    id 'jacoco'
}

group 'com.aravindhu'
version '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation("com.google.guava:guava:30.1.1-jre")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}


sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functional-test/java')
        }
        resources.srcDir file('src/functional-test/resources')
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
        testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom testRuntimeOnly
}

jar {
    archiveBaseName = 'geektrust' //Please do not change this final artifact name
    archiveVersion = null   //Please do not change this final artifact version
    version = null   //Please do not change this final artifact version

    manifest {
        attributes 'Main-Class' : 'com.example.ExampleMain' //Change this to the main class of your program which will be executed
    }
    // To create a single jar with all dependencies.
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

task functionalTest(type: Test) {
    group = 'verification'
    description = 'Runs the functional tests.'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test

    useJUnitPlatform()

    testLogging {
        events = ['FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT']
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events = ['FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT']
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

pmd {
    consoleOutput = true
    toolVersion = "6.21.0"
    ruleSets = ["${rootDir}/code-quality/tame-of-thrones-rules.xml"]
}

checkstyle {
    toolVersion '8.31'
    configFile file("${rootDir}/code-quality/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("${rootDir}/code-quality/checkstyle-suppressions.xml").absolutePath
}

check {
    dependsOn functionalTest
    dependsOn jacocoTestReport
    dependsOn jacocoTestCoverageVerification
    dependsOn pmdMain
    dependsOn checkstyleMain
    dependsOn checkstyleTest
    dependsOn checkstyleFunctionalTest
}
